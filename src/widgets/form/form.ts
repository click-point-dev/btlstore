import Inputmask from 'inputmask';
import JustValidate, { Rules } from 'just-validate';
import {
   addClass,
   changeElements,
   documentLock,
   documentUnlock,
   getVacancyName,
   inputFile,
   inputRadio,
   multicheckbox,
   RadioGruoupData,
   removeClass,
   showOverlay,
} from '../../shared';

export function form(): void {
   const forms = Array.from(document.forms);

   if (!forms.length) return;

   forms.forEach(form => {
      // console.log(form);
      //+ –æ–±—Ä–∞–±–æ—Ç–∫–∞ input name=fn
      const fn = form.querySelector('#fn');
      if (fn) {
         setTimeout(function () {
            if (fn.hasAttribute('required')) fn.removeAttribute('required');
         }, 1500);
      }

      // phone mask
      const telInput = form.querySelector('input[type="tel"]') as HTMLElement;
      const inputMask = new Inputmask('+7 (999)-999-99-99', {
         showMaskOnHover: false,
      });
      if (telInput) {
         inputMask.mask(telInput);
      }

      // validate and submit
      const validate = new JustValidate(form, {
         validateBeforeSubmitting: true,
         // testingMode: true,
      });

      //radio inputs (with others inputs)
      inputRadio(form, validate);

      //file input
      inputFile(form, validate);

      validateForm(form, validate, telInput);

      validate.onSuccess(event => {
         const form = event.target as HTMLFormElement;
         submitForm(form);
      });
   });

   function validateForm(
      form: HTMLFormElement,
      validate: JustValidate,
      telInput: HTMLElement,
   ) {
      if (form.name) {
         validate.addField(form.name, [
            {
               rule: Rules.CustomRegexp,
               value: /^[-–ê-–Ø–∞-—è–Å—ë A-Za-z]*$/,
               errorMessage: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª',
            },
            {
               rule: Rules.Required,
               errorMessage: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
            },
            {
               rule: Rules.MinLength,
               value: 3,
               errorMessage: '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞',
            },
            {
               rule: Rules.MaxLength,
               value: 30,
               errorMessage: '–ù–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤',
            },
         ]);
      }
      if (form.brand) {
         validate.addField(form.brand, [
            {
               rule: Rules.CustomRegexp,
               value: /^[-–ê-–Ø–∞-—è–Å—ë A-Za-z]*$/,
               errorMessage: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª',
            },
            {
               rule: Rules.Required,
               errorMessage: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é',
            },
         ]);
      }
      if (form.comment) {
         validate.addField(form.comment, [
            {
               rule: Rules.CustomRegexp,
               value: /^[-–ê-–Ø–∞-—è–Å—ë A-Za-z0-9]*$/,
               errorMessage: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª',
            },
            {
               rule: Rules.MaxLength,
               value: 500,
               errorMessage: '–ù–µ –±–æ–ª–µ–µ 115 —Å–∏–º–≤–æ–ª–æ–≤',
            },
         ]);
      }
      if (form.phone) {
         validate.addField(form.phone, [
            {
               rule: Rules.Required,
               errorMessage: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
            },
            {
               validator: function () {
                  let phone;
                  if (telInput.inputmask) {
                     phone = telInput.inputmask.unmaskedvalue();
                     // return phone.length === 10;
                  }
                  return Number(phone) && phone.length === 10 ? true : false;
               },
               errorMessage: '–í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä',
            },
         ]);
      }
      if (form.surname) {
         validate.addField(form.surname, [
            {
               rule: Rules.CustomRegexp,
               value: /^[-–ê-–Ø–∞-—è–Å—ë A-Za-z]*$/,
               errorMessage: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–∏—Ä–µ, –ø—Ä–æ–±–µ–ª',
            },
            {
               rule: Rules.Required,
               errorMessage: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é',
            },
            {
               rule: Rules.MinLength,
               value: 2,
               errorMessage: '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
            },
            {
               rule: Rules.MaxLength,
               value: 50,
               errorMessage: '–ù–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
            },
         ]);
      }
      if (form.bdate) {
         validate.addField(form.bdate, [
            {
               rule: Rules.Required,
               errorMessage: '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
            },
         ]);
      }
      if (form.sex) {
         validate.addField(form.sex, [
            {
               rule: Rules.Required,
               errorMessage: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª',
            },
         ]);
      }
      if (form.city) {
         validate.addField(form.city, [
            {
               rule: Rules.Required,
               errorMessage: '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥',
            },
            {
               rule: Rules.MinLength,
               value: 2,
               errorMessage: '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
            },
            {
               rule: Rules.MaxLength,
               value: 50,
               errorMessage: '–ù–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
            },
         ]);
      }
      if (form.height) {
         validate.addField(form.height, [
            {
               rule: Rules.Required,
               errorMessage: '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º',
            },
         ]);
      }
      if (form.job) {
         const jobBlock = form
            .querySelector('input[name="job"]')
            .closest('.multicheckbox') as HTMLElement;
         validate.addRequiredGroup(jobBlock, '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç');
      }
      if (form.agreement) {
         validate.addField(form.agreement, [
            {
               rule: Rules.Required,
               errorMessage: '–°–æ–≥–ª–∞—Å–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            },
         ]);
      }
   }

   async function sendPostRequestToGoogleSheets(
      url: string,
      body: FormData,
      message: string,
   ) {
      try {
         const res = await fetch(url, {
            method: 'POST',
            mode: 'no-cors',
            body: body,
         });

         // message += `<p>‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É</p>`;
      } catch (error) {
         // message += `<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ google sheet: ${error}</p>`;
         console.error(message, error);
      }
   }

   async function submitForm(form: HTMLFormElement) {
      const promoterSheetUrl =
         'https://script.google.com/macros/s/AKfycbyZvp1_-hO_051X3S8A_CZG64ob46lwTV6xzDX2ZkJZBxc4aPlFXb1RqsG1Cr5bpjjs/exec';
      let message: string = '';
      const formData = new FormData(form);
      const method = form.getAttribute('method');
      const loader = form.querySelector('.form__loader') as HTMLElement;
      const { isVacancy, vacancyTitle } = getVacancyName(form);
      const isGoogleSheets = form.hasAttribute('data-toGoogleSheets');

      const multicheckboxesData = multicheckbox(form);
      const radioGroupsData = JSON.parse(
         sessionStorage.getItem('radioGroupsData'),
      ) as Array<RadioGruoupData>;
      let commentString = formData.get('comment') || '';
      const height = formData.get('height') || '';
      const citizenship =
         radioGroupsData?.filter(item => item._nameAttr === 'citizenship')[0]
            ._value || formData.get('citizenship');
      const medical_book = formData.get('medical_book') || '';
      const clothes_size = formData.get('clothes_size') || '';
      const phone = formData.get('phone') || '';

      formData.set(
         'title',
         `${isVacancy ? `–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancyTitle}` : `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ ${window.location.hostname}`}`,
      );
      if (isVacancy) formData.set('type', 'vacancy');

      if (Boolean(height))
         commentString += `–†–æ—Å—Ç: ${height.toString().trim()} —Å–º;\r\n`;
      if (Boolean(citizenship))
         commentString += `–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${citizenship.toString().trim()};\r\n`;
      if (Boolean(clothes_size))
         commentString += `–†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: ${clothes_size.toString().trim()};\r\n`;
      if (Boolean(medical_book))
         commentString += `–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞: ${medical_book.toString().trim()};\r\n`;

      multicheckboxesData.forEach(data => {
         if (data.value.length) {
            commentString += `${data.title}: ${data.value.join(', ')}`;
         }
         if (data.value.length && isGoogleSheets) {
            formData.set('job', data.value.join(', '));
         }
      });
      commentString && formData.set('comment', commentString);

      phone &&
         formData.set('phone', phone.toString().trim().replace(/[\D]+/g, ''));

      citizenship && formData.set('citizenship', citizenship);

      //+ –ª–æ–≥–∏ formData
      // for (let [key, value] of formData.entries()) {
      //    console.log(key, value);
      // }

      try {
         addClass(loader, 'visible');
         const res = await fetch('/api/request.php', {
            method: method,
            body: formData,
         });

         if (res.status !== 200) {
            throw new Error(
               `<p>‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ ${res.status}</p></br><p>—Å–µ–π—á–∞—Å –≤–µ—Ä–Ω–µ–º –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ!</p><p class="h3">ü§∑‚Äç‚ôÄÔ∏è</p>`,
            );
         }

         isGoogleSheets &&
            (await sendPostRequestToGoogleSheets(
               promoterSheetUrl,
               formData,
               message,
            ));

         message +=
            '<p>‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.</p></br><p>—Å–µ–π—á–∞—Å –≤–µ—Ä–Ω–µ–º –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ!</p><p class="h3">ü§ó</p>';
         form.reset();
      } catch (error) {
         console.error(error);
         message += error;
      } finally {
         removeClass(loader, 'visible');
         await showOverlay(
            document.body,
            message,
            'text-xs align-center',
            3000,
         );
      }
   }
}
